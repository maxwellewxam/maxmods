My Python Library
My Python Library is an open-source library for authenticating users and accessing user data on a server.

Installation
To install My Python Library, use pip:

Copy code
pip install my-python-library
Or, to install from source:

Copy code
git clone https://github.com/<user>/my-python-library.git
cd my-python-library
python setup.py install
Usage
To use My Python Library, you will need to create an AuthSesh instance. There are several different ways to do this, depending on your needs:

Copy code
# Connect to a local database
auth = AuthSesh()

# Connect to a remote database at the specified address
auth = AuthSesh("<address>")

# Connect to a local database at the specified path
auth = AuthSesh("<path>")
Once you have created an AuthSesh instance, you can log in and access user data using the following methods:

Copy code
# Set the username and password
auth.set_vals("<username>", "<password>")

# Log in to the server
auth.login()

# Load data from the specified location on the server
user_data = auth.load("<path>")
When you are finished, you can terminate the AuthSesh instance by calling the terminate method:

Copy code
auth.terminate()
Alternatively, you can use a context manager to automatically terminate the AuthSesh instance when you are done:

Copy code
with AuthSesh() as auth:
    auth.set_vals("<username>", "<password>")
    auth.login()
    user_data = auth.load("<path>")
License
My Python Library is licensed under the terms of the MIT license.

Contributions
Contributions are welcome! Please fork the repository and open a pull request to add new features or fix bugs.
        
        elif request['Code'] == 202:
            return request['Data']
        
        elif request['Code'] == 416:
            raise LocationError('Loaction does not exist')
        
        elif request['Code'] == 401:
            raise PasswordError('Incorrect password')
        
        elif request['Code'] == 404:
            raise UsernameError('Username does not exist')
        
        elif request['Code'] == 406:
            raise UsernameError('Invalid username')
        
        elif request['Code'] == 409:
            raise UsernameError('Username already exists')
        
        elif request['Code'] == 423:
            raise AuthenticationError('Failed to authenticate user')

        elif request['Code'] == 101:
            self._Hash = request['Hash']
        
        elif request['Code'] == 102:
            self._certadder(request['Server'])
            
        elif request['Code'] == 420:
            raise DataError(f"An error occured during the request, here is the data we could recover: {request['Data']}/n Error: {request['err']}" )
            

Rename jsonHandle to JsonResponse
Rename HandleWrapper to json_response
Rename signup to sign_up
Rename save to save_data
Rename delete to delete_data
Rename logout to log_out
Rename remove to remove_account
Rename login to log_in
Rename load to load_data
Rename greet to create_session
Rename leave to end_session
Rename usercache to UserCache
Rename add to add_user
Rename find to find_user
Rename update to update_user
Rename delete to delete_user
Rename encrypt to encrypt_data
Rename decrypt to decrypt_data
Rename encrypt_fast to encrypt_data_fast
Rename decrypt_fast to decrypt_data_fast
Rename create_hash to create_password_hash
Rename check_hash to verify_password_hash
Rename num_to_str to convert_numbers_to_words
Rename is_serialized to is_json_serialized
Rename good_key to is_valid_key
Rename Code to code
Rename Data to data
Rename Hash to hash
Rename Id to id
Rename Location to location
Rename Username to username
Rename Password to password
Rename DataMod to User
Rename err to error
Rename fromdat to user_from_database
Rename datPass to password_from_database
Rename inf to user_info
Rename parsed to parsed_location